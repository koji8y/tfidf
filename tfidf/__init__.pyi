from typing import Any, Callable, Collection, Dict, Optional, TypeVar

Term = TypeVar('Term')
Doc = TypeVar('Doc')

class TfIdf:
    get_terms_of_doc: Callable[[Doc], Collection[Term]] = ...
    get_docs: Callable[[], Collection[Doc]] = ...
    def __init__(self, get_terms_of_doc: Callable[[Doc], Collection[Term]], get_docs: Callable[[], Collection[Doc]]) -> None: ...
    @property
    def idx_to_term(self) -> Dict[int, Term]: ...
    @property
    def term_hash_to_idx(self) -> Dict[int, int]: ...
    @property
    def idx_to_doc(self) -> Dict[int, Doc]: ...
    @property
    def doc_hash_to_idx(self) -> Dict[int, int]: ...
    @property
    def doc_to_term_to_term_count(self) -> Dict[int, Dict[int, int]]: ...
    @property
    def term_to_doc_count(self) -> Dict[int, int]: ...
    @property
    def term_to_idf(self) -> Dict[int, float]: ...
    @property
    def doc_to_term_to_tf(self) -> Dict[int, Dict[int, float]]: ...
    @property
    def doc_to_term_to_tfidf(self) -> Dict[int, Dict[int, float]]: ...
    def idx_of_term(self, term: Term) -> int: ...
    def decode_term_idx(self, idx: int) -> Optional[Term]: ...
    @property
    def idf(self) -> Dict[Term, float]: ...
    @property
    def tf(self) -> Dict[int, Dict[Term, float]]: ...
    @property
    def tfidf(self) -> Dict[int, Dict[Term, float]]: ...
